from aiogram import Bot, Dispatcher, types, executor
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from contextlib import suppress
from markups import *
import pandas as pd

from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)



TOKEN='6846866593:AAE0rTgXwtHswMigPntIWq4-OkS8QpaM3f4'
CHANEL_ID = "-1002012883717"
ORDERS_ID = "-1002010880352"
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


drivers = {} #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
orders = {} #—Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
drivers_states = {}

try:
    D=pd.read_csv('D.csv', index_col=0)
except:
    D = pd.DataFrame(columns=["name", "auto_name", "gos_num", "count", "tel_num"])


try:
    P = pd.read_csv("P.csv", index_col=0)
except:
    P=pd.DataFrame(columns=['tel_num', 'count'],)

class OrderStates(StatesGroup):
    GetAdress = State()
    GetLocation = State()
    GetFinish = State()
    GetTel =State()
    ConfirmOrder = State()
    Success = State()
    Waiting = State()
    GetTime = State() #–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ 

class DriverState(StatesGroup):
    GetFIO = State()
    GetTelNum = State()
    GetAuto_name = State()
    GetGosNum = State()
    ConfirmOrder = State()


class Driver:
    def __init__(self, id):
        self.id = id
        self.name = None
        self.auto_name =None
        self.gos_num = None
        self.count = 0

d={}

@dp.message_handler(commands=['begin', 'finish'], state='*')
async def start(message, state):
    id = message['from']['id']
    if id in D.index:
        if (message.text == '/begin'):
            drivers_states[id] = 1
            await message.answer('–í–∞—à —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã.')
        else:
            drivers_states.pop(id)
            await message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É.")
    else:
        await message.answer("–í—ã –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å")

            
    

@dp.message_handler(commands=['start'],state='*')
async def start(message, state):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏.\n'+f"<b>–í–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏:</b> {len(drivers_states)}", reply_markup= start_markup, parse_mode='HTML')
    await OrderStates.GetAdress.set()

@dp.callback_query_handler(lambda call: call.data == '–∞–∫–∫', state='*')
async def dips(call, state):
    id = call['from']['id']
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    if id in P.index:
        pas = P.loc[id]
        await call.message.answer(f"–ö–æ–ª-–≤–æ –ø–æ–µ–∑–¥–æ–∫: {pas['count']}")
    else:
        await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫")
    
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == '–∑–∞–±—Ä', state= "*")
async def tommorow(call, state):
    id = call['from']['id']
    d[id] = Passanger(id)

    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()        

    d[id].tommorow = True
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è')
    await OrderStates.GetTime.set()

@dp.message_handler(state=OrderStates.GetTime)
async def get_time(message, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
    id = message['from']['id']
    d[id].time = message.text
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å—Å')
    await OrderStates.GetLocation.set()


@dp.callback_query_handler(lambda call: call.data=='–∑–∞–∫', state=OrderStates.GetAdress)
async def get_adres(call, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    id = call['from']['id']
    d[id] = Passanger(id)
    d[id].tommorow = False
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å—Å')
    await OrderStates.GetLocation.set()
    

@dp.message_handler(state=OrderStates.GetLocation)
async def get_location(message, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
    id = message['from']['id']
    d[id].from_adres = message.text

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup = location_markup)
    await OrderStates.GetFinish.set()

@dp.message_handler(content_types=types.ContentType.LOCATION, state=OrderStates.GetFinish)
async def get_finish(message, state):
    id = message['from']['id']
    d[id].location = message.location

    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)

    await message.answer("–ö—É–¥–∞ –≤–∞—Å –æ—Ç–≤–µ—Å—Ç–∏?")
    await OrderStates.GetTel.set()

@dp.message_handler(state=OrderStates.GetTel)
async def get_tel(message, state):
    id=message['from']['id']
    d[id].to_adres = message.text

    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup = tel_markup)
    await OrderStates.ConfirmOrder.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderStates.ConfirmOrder)
async def tel(message, state):
    id = message['from']['id']
    d[id].tel_num = convert_to_digit(message.contact.phone_number)
    pas = d[id]
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
        text = formatted_text(pas)
    await message.answer(text, parse_mode= "HTML", reply_markup = markup_confirm)
    await OrderStates.Success.set()

@dp.message_handler(content_types=types.ContentType.TEXT, state=OrderStates.ConfirmOrder)
async def tel(message, state):
    id = message['from']['id']
    if is_valid_phone_number(message.text):
        d[id].tel_num = convert_to_digit(message.text)
        pas = d[id]
        with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
            await message.delete()
            await bot.delete_message(message.chat.id, message.message_id-1)
        text = formatted_text(pas)
        await message.answer(text, parse_mode= "HTML", reply_markup = markup_confirm)
        await OrderStates.Success.set()
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")

@dp.callback_query_handler(lambda call: call.data == '0', state = OrderStates.Success)
async def otmena(call, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    id=call['from']['id']
    d.pop(id)
    await call.message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ  /start')


@dp.callback_query_handler(lambda call: call.data == '1', state=OrderStates.Success)
async def confirm_order(call, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    id=call['from']['id']
    pas = d[id]

    await call.message.answer(formatted_text(pas), parse_mode = 'HTML')
    mark_cancel = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É', callback_data='&'+str(d)))
    await call.message.answer("–ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è...üîé\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–º, —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=mark_cancel)
    await OrderStates.Waiting.set()
    text = '' if pas.tommorow==False else "<b>üî¥–ó–ê–ö–ê–ó –ù–ê –ó–ê–í–¢–†–êüî¥</b>\n"
    chanel_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data="@"+str(id)))
    mes = await bot.send_message(CHANEL_ID, text + formatted_text(pas)+f"\n–ê–∫–∫–∞—É–Ω—Ç: @{call['from']['username']}", parse_mode='HTML', reply_markup=chanel_markup)
    orders[id] = mes.message_id


@dp.callback_query_handler(lambda call: call.data[0] == '&', state = OrderStates.Waiting)
async def cancle_order(call):

    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()

    id=call['from']['id']
    await bot.delete_message(CHANEL_ID, orders[id])
    await call.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')
    orders.pop(id)

@dp.callback_query_handler(lambda call: call.data[0] =='@', state = '*')
async def take_order(call, state):
    id = call['from']['id']
    f = (P.at[pas_id, 'count']+1)%7 == 0
    if (id in D.index):
        pas_id = int(call.data[1:])
        with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
            await call.message.delete()
        markup_arrived = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ü–æ–¥—ä–µ—Ö–∞–ª", callback_data="#"+str(pas_id)))
        driver_info = D.loc[id]
        if pas_id in P.index:
            if f:
                await bot.send_message(pas_id, "<b>–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –±—É–¥–µ—Ç –∑–∞ –Ω–∞—à c—á–µ—Ç!</b>", parse_mode='HTML')
                await bot.send_message(id, "–ü–æ–µ–∑–¥–∫–∞ –∑–∞ —Å—á–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è")
                await bot.send_message(ORDERS_ID, "–ü–æ–µ–∑–¥–∫–∞ –∑–∞ —Å—á–µ—Ç —Ç–∞–∫—Å–∏")
        

        text = "üöï–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Çüöï\n" + ("–ó–∞–≤—Ç—Ä–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∫ –≤–∞–º –ø—Ä–∏–µ–¥–µ—Ç —Ç–∞–∫—Å–∏.\
                                           –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º."
                                           if d[pas_id].tommorow == True else " –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤ –ø—É—Ç–∏")

        mes = await bot.send_message(pas_id, text)
        with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
            await bot.delete_message(pas_id, mes.message_id-1)
        await bot.send_message(pas_id, f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ‚Ñπ\n–§–ò–û:</b> {driver_info['name']}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {driver_info['tel_num']}\n<b>–ò–Ω—Ñ–æ –æ –º–∞—à–∏–Ω–µ:</b> {driver_info['auto_name']}\n<b>–ì–æ—Å–ù–æ–º–µ—Ä:</b> {driver_info['gos_num']}", parse_mode='HTML')
        await bot.send_location(id, d[pas_id].location.latitude, d[pas_id].location.longitude)
        await bot.send_message(call['from']['id'], call.message.text, parse_mode='HTML', reply_markup=markup_arrived)
        await bot.send_message(ORDERS_ID, call.message.text+f"\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ‚Ñπ\n–§–ò–û:</b> {driver_info['name']}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {driver_info['tel_num']}\n<b>–ò–Ω—Ñ–æ –æ –º–∞—à–∏–Ω–µ:</b> {driver_info['auto_name']}\n<b>–ì–æ—Å–ù–æ–º–µ—Ä:</b> {driver_info['gos_num']}", parse_mode = 'HTML')
    else:
        await bot.send_message(id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /new_driver")


@dp.callback_query_handler(lambda call: call.data[0] == '#', state="*")
async def driver_come(call, state):
    pas_id = int(call.data[1:])
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    markup_finish = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="^"+str(pas_id)))
    await call.message.answer(call.message.text, reply_markup=markup_finish)
    await bot.send_message(pas_id, "üöñ–í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Åüöñ\n–ú–æ–∂–µ—Ç–µ –≤—ã—Ö–æ–¥–∏—Ç—å")



@dp.callback_query_handler(lambda call: call.data[0] == '^', state="*")
async def finish_road(call, state):
    pas_id = int(call.data[1:])
    driv_id = call['from']['id']

    D.at[driv_id, 'count']+=1

    pas = d[pas_id]
   

    if pas_id not in P.index:
        P.loc[pas_id] = [pas.tel_num, 0]
    
    P.at[pas_id, 'count'] += 1
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()

    await call.message.answer(f"+1 –ø–æ–µ–∑–¥–∫–∞. –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {D.loc[driv_id]['count']}")


    await bot.send_message(pas_id, "–ú—ã –ø—Ä–∏–µ—Ö–∞–ª–∏! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Åüéà", reply_markup=markup_req)
    D.to_csv('D.csv', index=True)
    P.to_csv('P.csv', index=True)



@dp.message_handler(commands=['new_driver'], state='*')
async def driver_sign_in(message, state):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
    id = message['from']['id']
    drivers[id]=Driver(id)
    await DriverState.GetFIO.set()

@dp.message_handler(state=DriverState.GetFIO)
async def driver_FIO(message, state):
    id = message['from']['id']
    if len(message.text.split()) == 3:
        drivers[id].name=message.text
        with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
            await message.delete()
            await bot.delete_message(message.chat.id, message.message_id-1)
        await DriverState.GetTelNum.set()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=tel_markup)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

@dp.message_handler(content_types=types.ContentType.CONTACT, state=DriverState.GetTelNum)
async def driver_tel(message, state):
    id = message['from']['id']
    drivers[id].tel_num = convert_to_digit(message.contact.phone_number)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–Ω–∏–µ –º–∞—à–∏–Ω—ã, —Ü–≤–µ—Ç")
    await DriverState.GetAuto_name.set()

@dp.message_handler(state=DriverState.GetAuto_name)
async def auto_name(message, state):
    id = message['from']['id']
    drivers[id].auto_name = message.text
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ì–æ—Å–ù–æ–º–µ—Ä, –ø—Ä–∏–º–µ—Ä A999–ë–ë")
    await DriverState.GetGosNum.set()

@dp.message_handler(state=DriverState.GetGosNum)
async def get_gos_num(message, state):

    id = message['from']['id']
    drivers[id].gos_num = message.text
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id-1)
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {drivers[id].name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {drivers[id].tel_num}\n –ò–Ω—Ñ–æ –æ –º–∞—à–∏–Ω–µ: {drivers[id].auto_name}\n –ì–æ—Å–ù–æ–º–µ—Ä: {drivers[id].gos_num}', reply_markup=markup_confirm)
    await DriverState.ConfirmOrder.set()

@dp.callback_query_handler(lambda call: call.data == '1', state=DriverState.ConfirmOrder)
async def confirm_driver(call, state):
    id = call['from']['id']
    driver = drivers[id]
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    await call.message.answer(f'–§–ò–û: {drivers[id].name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {drivers[id].tel_num}\n –ò–Ω—Ñ–æ –æ –º–∞—à–∏–Ω–µ: {drivers[id].auto_name}\n –ì–æ—Å–ù–æ–º–µ—Ä: {drivers[id].gos_num}')
    if id in D.index:
        D.drop([id], inplace=True)

    D.loc[driver.id] = [driver.name, driver.auto_name, driver.gos_num, driver.count, driver.tel_num]
    D.to_csv('D.csv', index=True)
    
    del drivers[id]
    await call.message.answer("–í—ã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await state.finish()

@dp.callback_query_handler(lambda call:call.data == '0', state=DriverState.ConfirmOrder)
async def zero_conf(call, state):
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await call.message.delete()
    await call.message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /new_driver")

@dp.message_handler(commands=['admin'], state='*')
async def admin_send_info(message):
        DD = open('D.csv')
        PP = open('P.csv')
        await bot.send_document(message['from']['id'], PP)
        await bot.send_document(message['from']['id'], DD)
        PP.close()
        DD.close()


executor.start_polling(dp)
